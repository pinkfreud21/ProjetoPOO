/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;


import code.Cliente;
import code.Jogos;
import code.Conexao;

import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vletr
 */
public class telaMenu extends javax.swing.JFrame {

    Cliente c = null;
    ArrayList<Jogos> listaJogos = new ArrayList<>();
    ArrayList<Jogos> listaCarrinho = new ArrayList<>();
    ArrayList<Jogos> listaBiblioteca = new ArrayList<>();
    ArrayList<Integer> listaAjuda = new ArrayList<>();
    ArrayList<Cliente> listaClientes = new ArrayList<>();

    public void SetCliente(Cliente cliente) {
        this.c = cliente;

        attSaldo();
        verificaCliente(c.getId());
        attListaBiblioteca();
        atualizaTabelaBiblioteca();
    }

    /**
     * Creates new form telaMenu
     */
    public void verificaCliente(int tipo) {
        //consultar banco
        Conexao con = new Conexao();
        try {
            Statement stmt = con.getConnection().createStatement();
            String sql = "SELECT tipoUser FROM cliente WHERE id = " + tipo + ";";
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                tipo = rs.getInt(1);
            }
        } catch (Exception e) {
            System.out.println(e);
        }

        if (tipo == 1) {
            jbtNovoJogo.setVisible(true);
        } else {
            jbtNovoJogo.setVisible(false);
            jPainelClientes.setVisible(false);
        }
    }

    public telaMenu() {
        initComponents();
        this.setSize(1280, 720);
        this.setLocation(350, 180);

        jPainelBiblioteca.setBorder(BorderFactory.createRaisedBevelBorder());
        jPainelHistorico.setBorder(BorderFactory.createEmptyBorder());
        jPainelLoja.setBorder(BorderFactory.createEmptyBorder());
        jPainelClientes.setBorder(BorderFactory.createEmptyBorder());
        jBiblioteca.setVisible(true);
        jHistorico.setVisible(false);
        jLoja.setVisible(false);
        jClientes.setVisible(false);
        
        
        attListaLoja();
        atualizaTabelaLoja();
        attListaBiblioteca();
        atualizaTabelaBiblioteca();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLoja = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jbtFinaliza = new javax.swing.JButton();
        jbtRemoveCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaLoja = new javax.swing.JTable();
        jbtVisualizar = new javax.swing.JButton();
        jbtAddCart = new javax.swing.JButton();
        jbtNovoJogo = new javax.swing.JButton();
        jBiblioteca = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaBiblioteca = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jClientes = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaClientes = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jHistorico = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaHistorico = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPainelBiblioteca = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPainelLoja = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPainelHistorico = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        Saldo = new javax.swing.JLabel();
        jValor = new javax.swing.JLabel();
        jbtAddSaldo = new javax.swing.JButton();
        jPainelClientes = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        getContentPane().setLayout(null);

        jLoja.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLoja.setPreferredSize(new java.awt.Dimension(980, 720));
        jLoja.setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jogo", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaCarrinho);
        if (tabelaCarrinho.getColumnModel().getColumnCount() > 0) {
            tabelaCarrinho.getColumnModel().getColumn(0).setResizable(false);
            tabelaCarrinho.getColumnModel().getColumn(0).setPreferredWidth(200);
            tabelaCarrinho.getColumnModel().getColumn(1).setResizable(false);
            tabelaCarrinho.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Carrinho");

        jbtFinaliza.setText("Finalizar Compra");
        jbtFinaliza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtFinalizaActionPerformed(evt);
            }
        });

        jbtRemoveCart.setText("Remover do Carrinho");
        jbtRemoveCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRemoveCartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtFinaliza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtRemoveCart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbtRemoveCart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtFinaliza)
                .addGap(14, 14, 14))
        );

        jLoja.add(jPanel1);
        jPanel1.setBounds(702, 2, 276, 716);

        tabelaLoja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Jogo", "Descricao", "Genero", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaLoja.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabelaLoja);
        if (tabelaLoja.getColumnModel().getColumnCount() > 0) {
            tabelaLoja.getColumnModel().getColumn(0).setResizable(false);
            tabelaLoja.getColumnModel().getColumn(0).setPreferredWidth(200);
            tabelaLoja.getColumnModel().getColumn(1).setResizable(false);
            tabelaLoja.getColumnModel().getColumn(1).setPreferredWidth(500);
            tabelaLoja.getColumnModel().getColumn(2).setResizable(false);
            tabelaLoja.getColumnModel().getColumn(2).setPreferredWidth(100);
            tabelaLoja.getColumnModel().getColumn(3).setResizable(false);
            tabelaLoja.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jLoja.add(jScrollPane2);
        jScrollPane2.setBounds(10, 20, 680, 640);

        jbtVisualizar.setText("Visualizar");
        jbtVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtVisualizarActionPerformed(evt);
            }
        });
        jLoja.add(jbtVisualizar);
        jbtVisualizar.setBounds(10, 677, 110, 23);

        jbtAddCart.setText("Adicionar carrinho");
        jbtAddCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddCartActionPerformed(evt);
            }
        });
        jLoja.add(jbtAddCart);
        jbtAddCart.setBounds(540, 680, 150, 20);

        jbtNovoJogo.setText("Adicionar novo Jogo");
        jbtNovoJogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNovoJogoActionPerformed(evt);
            }
        });
        jLoja.add(jbtNovoJogo);
        jbtNovoJogo.setBounds(130, 677, 140, 23);

        getContentPane().add(jLoja);
        jLoja.setBounds(300, 0, 980, 720);

        jBiblioteca.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabelaBiblioteca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Jogo", "Genero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaBiblioteca.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tabelaBiblioteca);
        if (tabelaBiblioteca.getColumnModel().getColumnCount() > 0) {
            tabelaBiblioteca.getColumnModel().getColumn(0).setResizable(false);
            tabelaBiblioteca.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelaBiblioteca.getColumnModel().getColumn(1).setResizable(false);
            tabelaBiblioteca.getColumnModel().getColumn(1).setPreferredWidth(1000);
            tabelaBiblioteca.getColumnModel().getColumn(2).setResizable(false);
            tabelaBiblioteca.getColumnModel().getColumn(2).setPreferredWidth(1000);
        }

        jButton8.setText("Visualizar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jBibliotecaLayout = new javax.swing.GroupLayout(jBiblioteca);
        jBiblioteca.setLayout(jBibliotecaLayout);
        jBibliotecaLayout.setHorizontalGroup(
            jBibliotecaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBibliotecaLayout.createSequentialGroup()
                .addGroup(jBibliotecaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBibliotecaLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 955, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jBibliotecaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jBibliotecaLayout.setVerticalGroup(
            jBibliotecaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBibliotecaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jBiblioteca);
        jBiblioteca.setBounds(300, 0, 980, 720);

        tabelaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "E-mail", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaClientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tabelaClientes);
        if (tabelaClientes.getColumnModel().getColumnCount() > 0) {
            tabelaClientes.getColumnModel().getColumn(0).setResizable(false);
            tabelaClientes.getColumnModel().getColumn(0).setPreferredWidth(200);
            tabelaClientes.getColumnModel().getColumn(1).setResizable(false);
            tabelaClientes.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabelaClientes.getColumnModel().getColumn(2).setResizable(false);
            tabelaClientes.getColumnModel().getColumn(2).setPreferredWidth(300);
            tabelaClientes.getColumnModel().getColumn(3).setResizable(false);
            tabelaClientes.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jButton3.setText("Visualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Adicionar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jClientesLayout = new javax.swing.GroupLayout(jClientes);
        jClientes.setLayout(jClientesLayout);
        jClientesLayout.setHorizontalGroup(
            jClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 968, Short.MAX_VALUE)
                    .addGroup(jClientesLayout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jClientesLayout.setVerticalGroup(
            jClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        getContentPane().add(jClientes);
        jClientes.setBounds(300, 0, 980, 720);

        jHistorico.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tabelaHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Quantidade Jogos", "Jogos", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaHistorico.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tabelaHistorico);
        if (tabelaHistorico.getColumnModel().getColumnCount() > 0) {
            tabelaHistorico.getColumnModel().getColumn(0).setResizable(false);
            tabelaHistorico.getColumnModel().getColumn(0).setPreferredWidth(100);
            tabelaHistorico.getColumnModel().getColumn(1).setResizable(false);
            tabelaHistorico.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabelaHistorico.getColumnModel().getColumn(2).setResizable(false);
            tabelaHistorico.getColumnModel().getColumn(2).setPreferredWidth(800);
            tabelaHistorico.getColumnModel().getColumn(3).setResizable(false);
            tabelaHistorico.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jButton2.setText("Visualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jHistoricoLayout = new javax.swing.GroupLayout(jHistorico);
        jHistorico.setLayout(jHistoricoLayout);
        jHistoricoLayout.setHorizontalGroup(
            jHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(870, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jHistoricoLayout.setVerticalGroup(
            jHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jHistoricoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(jHistorico);
        jHistorico.setBounds(300, 0, 980, 720);

        jPainelBiblioteca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPainelBibliotecaMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Biblioteca");

        javax.swing.GroupLayout jPainelBibliotecaLayout = new javax.swing.GroupLayout(jPainelBiblioteca);
        jPainelBiblioteca.setLayout(jPainelBibliotecaLayout);
        jPainelBibliotecaLayout.setHorizontalGroup(
            jPainelBibliotecaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPainelBibliotecaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPainelBibliotecaLayout.setVerticalGroup(
            jPainelBibliotecaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPainelBibliotecaLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPainelBiblioteca);
        jPainelBiblioteca.setBounds(0, 240, 300, 50);

        jPainelLoja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPainelLojaMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Loja");

        javax.swing.GroupLayout jPainelLojaLayout = new javax.swing.GroupLayout(jPainelLoja);
        jPainelLoja.setLayout(jPainelLojaLayout);
        jPainelLojaLayout.setHorizontalGroup(
            jPainelLojaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPainelLojaLayout.setVerticalGroup(
            jPainelLojaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPainelLoja);
        jPainelLoja.setBounds(0, 290, 300, 50);

        jPainelHistorico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPainelHistoricoMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Historico");

        javax.swing.GroupLayout jPainelHistoricoLayout = new javax.swing.GroupLayout(jPainelHistorico);
        jPainelHistorico.setLayout(jPainelHistoricoLayout);
        jPainelHistoricoLayout.setHorizontalGroup(
            jPainelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPainelHistoricoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPainelHistoricoLayout.setVerticalGroup(
            jPainelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPainelHistoricoLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPainelHistorico);
        jPainelHistorico.setBounds(0, 340, 300, 50);

        jButton6.setText("Finalizar Sistema");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(10, 680, 280, 23);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/lrlogo1.0lrlogo1.0 (1).png"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(50, 10, 200, 200);

        Saldo.setText("Saldo   :");
        getContentPane().add(Saldo);
        Saldo.setBounds(10, 650, 50, 16);

        jValor.setText("NULL");
        getContentPane().add(jValor);
        jValor.setBounds(60, 650, 100, 16);

        jbtAddSaldo.setText("Adicionar saldo");
        jbtAddSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddSaldoActionPerformed(evt);
            }
        });
        getContentPane().add(jbtAddSaldo);
        jbtAddSaldo.setBounds(145, 650, 140, 23);

        jPainelClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPainelClientesMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Clientes");

        javax.swing.GroupLayout jPainelClientesLayout = new javax.swing.GroupLayout(jPainelClientes);
        jPainelClientes.setLayout(jPainelClientesLayout);
        jPainelClientesLayout.setHorizontalGroup(
            jPainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPainelClientesLayout.setVerticalGroup(
            jPainelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPainelClientes);
        jPainelClientes.setBounds(0, 390, 300, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void jPainelBibliotecaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPainelBibliotecaMouseClicked
        // TODO add your handling code here:
        jPainelBiblioteca.setBorder(BorderFactory.createRaisedBevelBorder());
        jPainelHistorico.setBorder(BorderFactory.createEmptyBorder());
        jPainelLoja.setBorder(BorderFactory.createEmptyBorder());
        jPainelClientes.setBorder(BorderFactory.createEmptyBorder());
        jBiblioteca.setVisible(true);
        jHistorico.setVisible(false);
        jLoja.setVisible(false);
        jClientes.setVisible(false);

        attListaBiblioteca();
        atualizaTabelaBiblioteca();
    }//GEN-LAST:event_jPainelBibliotecaMouseClicked

    private void jPainelLojaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPainelLojaMouseClicked
        // TODO add your handling code here:
        jPainelBiblioteca.setBorder(BorderFactory.createEmptyBorder());
        jPainelHistorico.setBorder(BorderFactory.createEmptyBorder());
        jPainelLoja.setBorder(BorderFactory.createRaisedBevelBorder());
        jPainelClientes.setBorder(BorderFactory.createEmptyBorder());
        jBiblioteca.setVisible(false);
        jHistorico.setVisible(false);
        jLoja.setVisible(true);
        jClientes.setVisible(false);

        attListaLoja();
        atualizaTabelaLoja();
    }//GEN-LAST:event_jPainelLojaMouseClicked

    private void jPainelHistoricoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPainelHistoricoMouseClicked
        // TODO add your handling code here:
        jPainelBiblioteca.setBorder(BorderFactory.createEmptyBorder());
        jPainelHistorico.setBorder(BorderFactory.createRaisedBevelBorder());
        jPainelLoja.setBorder(BorderFactory.createEmptyBorder());
        jPainelClientes.setBorder(BorderFactory.createEmptyBorder());
        jBiblioteca.setVisible(false);
        jHistorico.setVisible(true);
        jLoja.setVisible(false);
        jClientes.setVisible(false);

        attListaHistorico();

    }//GEN-LAST:event_jPainelHistoricoMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jbtNovoJogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNovoJogoActionPerformed
        // TODO add your handling code here:
        telaCadastroJogo telaDados = new telaCadastroJogo(null, true);
        telaDados.setLocationRelativeTo(null);
        this.setVisible(false);
        telaDados.setVisible(true);

        if (!telaDados.isCancelar()) {
            Jogos j = new Jogos();
            j = telaDados.getJogos();
            j.adicionar();
        }

        attListaLoja();
        atualizaTabelaLoja();
        this.setVisible(true);
    }//GEN-LAST:event_jbtNovoJogoActionPerformed

    private void jbtVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtVisualizarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaLoja.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Jogo para realizar a visualização.");
        } else {
            telaCadastroJogo telaDados = new telaCadastroJogo(null, true);
            telaDados.setLocationRelativeTo(null);

            Jogos jogoSelecionado = listaJogos.get(linhaSelecionada);
            telaDados.setDados(jogoSelecionado);

            telaDados.visualizar();
            this.setVisible(false);
            telaDados.setVisible(true);

            this.setVisible(true);
        }
    }//GEN-LAST:event_jbtVisualizarActionPerformed

    private void jbtAddCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddCartActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaLoja.getSelectedRow();
        tabelaLoja.clearSelection();
        tabelaCarrinho.clearSelection();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Jogo para adicionar ao carrinho.");
        } else {
            Jogos jogoSelecionado = listaJogos.get(linhaSelecionada);
            if (!listaCarrinho.contains(jogoSelecionado)) {
                int erros = 0;
                for (Jogos j : listaBiblioteca) {
                    if (j.getId() == jogoSelecionado.getId()) {
                        erros++;
                    }

                }

                if (erros == 0) {
                    listaCarrinho.add(jogoSelecionado);
                    atualizaTabelaCarrinho();
                } else {
                    JOptionPane.showMessageDialog(this, "Jogo ja adicionado na biblioteca!");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Jogo ja adicionado ao carrinho");
            }
        }

    }//GEN-LAST:event_jbtAddCartActionPerformed

    private void jbtRemoveCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRemoveCartActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaCarrinho.getSelectedRow();
        tabelaLoja.clearSelection();
        tabelaCarrinho.clearSelection();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Jogo para remover do carrinho.");
        } else {
            Jogos jogoSelecionado = listaJogos.get(linhaSelecionada);
            listaCarrinho.remove(jogoSelecionado);
            atualizaTabelaCarrinho();
        }
    }//GEN-LAST:event_jbtRemoveCartActionPerformed

    private void jbtFinalizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtFinalizaActionPerformed
        // TODO add your handling code here:
        telaVenda telaDados = new telaVenda(null, true);
        telaDados.setLocationRelativeTo(null);
        telaDados.setDados(listaCarrinho, c, listaBiblioteca);
        this.setVisible(false);
        telaDados.setVisible(true);
        ArrayList<Jogos> listaAux = new ArrayList<>();
        ArrayList<Jogos> listaAux2 = new ArrayList<>();
        if (!telaDados.isCancelar()) {
            listaAux = telaDados.getLista();
            listaAux2 = telaDados.getLista();
            //logica de adicao no banco

            int confirma = 0;
            for (Jogos a : listaAux) {
                String insert = "INSERT INTO biblioteca (idcliente, idjogo) VALUES (?, ?);";
                try {
                    Conexao con = new Conexao();
                    PreparedStatement pst = con.getConnection().prepareStatement(insert);
                    pst.setInt(1, c.getId());
                    pst.setInt(2, a.getId());
                    confirma = pst.executeUpdate();

                    float saldo = 0;
                    saldo = c.getSaldo() - telaDados.getValorCompra();

                    // verificar se existe no banco de dados se nao existir pedir novamente o usuario e senha
                    Statement stmt = con.getConnection().createStatement();
                    String sql = "UPDATE public.cliente SET saldo = " + saldo + " WHERE id = " + c.getId() + ";";
                    ResultSet rs = stmt.executeQuery(sql);
                    c.setSaldo(saldo);
                    attSaldo();
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
            if (confirma == 1) {
                JOptionPane.showMessageDialog(null, "Compra realizada com sucesso!");

                int i = 0;
                //criar Historico
                Conexao con = new Conexao();
                // percorrer as linhas da tabela jogos e mostrar os jogos disponiveis
                try {
                    Statement stmt = con.getConnection().createStatement();
                    String sql = "SELECT MAX(separacao) FROM historico;";
                    ResultSet rs = stmt.executeQuery(sql);
                    if (rs.next()) {
                        i = rs.getInt(1);
                        i++;
                        // caso acha                        
                    } else {
                        // caso base
                        i = 1;
                    }
                    for (Jogos a : listaAux2) {
                        String insert = "INSERT INTO historico (idcliente, idjogo, separacao) VALUES (?, ?, ?);";
                        try {
                            PreparedStatement pst = con.getConnection().prepareStatement(insert);
                            pst.setInt(1, c.getId());
                            pst.setInt(2, a.getId());
                            pst.setInt(3, i);

                            pst.executeUpdate();
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
                listaCarrinho.clear();
                atualizaTabelaCarrinho();

            } else {
                JOptionPane.showMessageDialog(null, "Compra não realizada!");
            }
        }
        attSaldo();
        this.setVisible(true);
    }//GEN-LAST:event_jbtFinalizaActionPerformed

    private void jbtAddSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddSaldoActionPerformed
        // TODO add your handling code here:
        telaAddSaldo telaDados = new telaAddSaldo(null, true);
        telaDados.setLocationRelativeTo(null);
        telaDados.setC(c);
        telaDados.attValor();
        this.setVisible(false);
        telaDados.setVisible(true);
        if (!telaDados.isCancelar()) {
            this.c = telaDados.getC();
        }
        this.setVisible(true);

        attSaldo();


    }//GEN-LAST:event_jbtAddSaldoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaHistorico.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma compra para realizar a visualização.");
        } else {
            telaVenda telaDados = new telaVenda(null, true);
            telaDados.setLocationRelativeTo(null);

            int separacao = listaAjuda.get(linhaSelecionada);
            telaDados.setSeparacao(separacao);

            telaDados.visualizar();
            this.setVisible(false);
            telaDados.setVisible(true);

            this.setVisible(true);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        telaCadastroCliente telaDados = new telaCadastroCliente(null, true);
        telaDados.setLocationRelativeTo(null);
        telaDados.setVisible(true);

        if (!telaDados.isCancelar()) {
            Cliente c = telaDados.getCliente();
            try {
                if(telaDados.returnAdm())
                {
                    c.cadastrarGUIADM();
                } else {
                    c.cadastrarGUI();
                }
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao cadastrar no banco de dados.");
            }
        }

        attListaCliente();

        atualizaTabelaCliente();


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jPainelClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPainelClientesMouseClicked
        // TODO add your handling code here:
        jPainelBiblioteca.setBorder(BorderFactory.createEmptyBorder());
        jPainelHistorico.setBorder(BorderFactory.createEmptyBorder());
        jPainelLoja.setBorder(BorderFactory.createEmptyBorder());
        jPainelClientes.setBorder(BorderFactory.createRaisedBevelBorder());

        jBiblioteca.setVisible(false);
        jHistorico.setVisible(false);
        jLoja.setVisible(false);
        jClientes.setVisible(true);

        attListaCliente();
        atualizaTabelaCliente();
    }//GEN-LAST:event_jPainelClientesMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         int linhaSelecionada = tabelaClientes.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente para realizar a visualização.");
        } else {
            telaCadastroCliente telaDados = new telaCadastroCliente(null, true);
            telaDados.setLocationRelativeTo(null);

            Cliente ls = listaClientes.get(linhaSelecionada);
            telaDados.setCliente(ls);

            telaDados.visu();
            telaDados.visualizar();
            this.setVisible(false);
            telaDados.setVisible(true);

            this.setVisible(true);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = tabelaBiblioteca.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Jogo para realizar a visualização.");
        } else {
            telaCadastroJogo telaDados = new telaCadastroJogo(null, true);
            telaDados.setLocationRelativeTo(null);

            Jogos jogoSelecionado = listaBiblioteca.get(linhaSelecionada);
            telaDados.setDados(jogoSelecionado);

            telaDados.visualizar();
            this.setVisible(false);
            telaDados.setVisible(true);

            this.setVisible(true);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void attSaldo() {
        String insert = "select saldo from Cliente Where id = ?";

        Conexao con = new Conexao();
        try {
            Statement stmt = con.getConnection().createStatement();
            String sql = "select saldo from Cliente Where id = " + c.getId() + ";";
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                jValor.setText("R$ " + rs.getFloat("saldo"));
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    private void atualizaTabelaLoja() {
        // pega o modelo da tabela, que foi definido para 
        // a inclusão dos dados
        DefaultTableModel modelo = (DefaultTableModel) tabelaLoja.getModel();

        // enquanto houver linhas na tabela
        while (modelo.getRowCount() > 0) {
            // apaga a primeira linha
            modelo.removeRow(0);
        }

        // percorre o ArrayList de salas
        for (Jogos s : listaJogos) {
            // adiciona uma linha na tabela
            // o object criado tem que ter a mesma quantidade
            // de elementos que foi definida na tabela, 
            // como também os mesmos tipos
            modelo.addRow(new Object[]{s.getNome(), s.getDescricao(), s.getGenero(), s.getPreco()});
        }
    }

    private void atualizaTabelaCarrinho() {
        // pega o modelo da tabela, que foi definido para 
        // a inclusão dos dados
        DefaultTableModel modelo = (DefaultTableModel) tabelaCarrinho.getModel();

        // enquanto houver linhas na tabela
        while (modelo.getRowCount() > 0) {
            // apaga a primeira linha
            modelo.removeRow(0);
        }

        // percorre o ArrayList de salas
        for (Jogos s : listaCarrinho) {
            // adiciona uma linha na tabela
            // o object criado tem que ter a mesma quantidade
            // de elementos que foi definida na tabela, 
            // como também os mesmos tipos
            modelo.addRow(new Object[]{s.getNome(), s.getPreco()});
        }

    }

    private void atualizaTabelaBiblioteca() {
        // pega o modelo da tabela, que foi definido para 
        // a inclusão dos dados
        DefaultTableModel modelo = (DefaultTableModel) tabelaBiblioteca.getModel();

        // enquanto houver linhas na tabela
        while (modelo.getRowCount() > 0) {
            // apaga a primeira linha
            modelo.removeRow(0);
        }

        // percorre o ArrayList de salas
        int i = 1;
        for (Jogos s : listaBiblioteca) {
            // adiciona uma linha na tabela
            // o object criado tem que ter a mesma quantidade
            // de elementos que foi definida na tabela, 
            // como também os mesmos tipos
            modelo.addRow(new Object[]{i, s.getNome(), s.getGenero()});
            i++;
        }

    }

    private void atualizaTabelaCliente() {
        // pega o modelo da tabela, que foi definido para 
        // a inclusão dos dados
        DefaultTableModel modelo = (DefaultTableModel) tabelaClientes.getModel();

        // enquanto houver linhas na tabela
        while (modelo.getRowCount() > 0) {
            // apaga a primeira linha
            modelo.removeRow(0);
        }
        Iterator i= new itemIterator(listaClientes);
        // percorre o ArrayList de salas
        while(i.temProximo())
        {
            modelo.addRow(new Object[]{i.proximo().getNome(), i.proximo().getCPF(), i.proximo().getEmail(), i.proximo().getSaldo()});
            i.addPos();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaMenu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Saldo;
    private javax.swing.JPanel jBiblioteca;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JPanel jClientes;
    private javax.swing.JPanel jHistorico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jLoja;
    private javax.swing.JPanel jPainelBiblioteca;
    private javax.swing.JPanel jPainelClientes;
    private javax.swing.JPanel jPainelHistorico;
    private javax.swing.JPanel jPainelLoja;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel jValor;
    private javax.swing.JButton jbtAddCart;
    private javax.swing.JButton jbtAddSaldo;
    private javax.swing.JButton jbtFinaliza;
    private javax.swing.JButton jbtNovoJogo;
    private javax.swing.JButton jbtRemoveCart;
    private javax.swing.JButton jbtVisualizar;
    private javax.swing.JTable tabelaBiblioteca;
    private javax.swing.JTable tabelaCarrinho;
    private javax.swing.JTable tabelaClientes;
    private javax.swing.JTable tabelaHistorico;
    private javax.swing.JTable tabelaLoja;
    // End of variables declaration//GEN-END:variables

    private void attListaLoja() {
        listaJogos.clear();
        Conexao con = new Conexao();
        // verificar se existe no banco de dados se nao existir pedir novamente o usuario e senha
        try {
            Statement stmt = con.getConnection().createStatement();
            String sql = "SELECT * FROM Jogos;";
            ResultSet rs = stmt.executeQuery(sql);
            Jogos a;
            while (rs.next()) {
                a = new Jogos();
                a.setId(rs.getInt("id"));
                a.setNome(rs.getString("nome"));
                a.setPreco(rs.getFloat("preco"));
                a.setGenero(rs.getString("genero"));
                a.setDesenvolvedora(rs.getString("desenvolvedora"));
                a.setDescricao(rs.getString("descricao"));
                listaJogos.add(a);
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void attListaBiblioteca() {
        listaBiblioteca.clear();
        Conexao con = new Conexao();
        // verificar se existe no banco de dados se nao existir pedir novamente o usuario e senha
        try {
            Statement stmt = con.getConnection().createStatement();
            String sql = "SELECT b.id AS id_biblioteca, j.id,j.nome AS nome_jogo,j.preco, j.genero, j.desenvolvedora, j.descricao FROM public.biblioteca b JOIN public.jogos j ON b.idjogo = j.id WHERE b.idcliente = " + c.getId() + ";";
            ResultSet rs = stmt.executeQuery(sql);
            Jogos a;
            while (rs.next()) {
                a = new Jogos();
                a.setId(rs.getInt(2));
                a.setNome(rs.getString(3));
                a.setPreco(rs.getFloat(4));
                a.setGenero(rs.getString(5));
                a.setDesenvolvedora(rs.getString(6));
                a.setDescricao(rs.getString(7));
                listaBiblioteca.add(a);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void attListaCliente() {
        listaClientes.clear();
        Conexao con = new Conexao();
        // verificar se existe no banco de dados se nao existir pedir novamente o usuario e senha
        try {
            Statement stmt = con.getConnection().createStatement();
            String sql = "SELECT * FROM cliente";
            ResultSet rs = stmt.executeQuery(sql);
            Cliente cli;
            while (rs.next()) {
                cli = new Cliente();
                cli.setId(rs.getInt(1));
                cli.setNome(rs.getString(2));
                cli.setCPF(rs.getString(3));
                cli.setEmail(rs.getString(4));
                cli.setUser(rs.getString(5));
                cli.setPassword(rs.getString(6));
                cli.setSaldo(rs.getFloat(7));

                listaClientes.add(cli);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void attListaHistorico() {
        Conexao con = new Conexao();
        DefaultTableModel modelo = (DefaultTableModel) tabelaHistorico.getModel();
        float valorTotal = 0;
        // enquanto houver linhas na tabela
        while (modelo.getRowCount() > 0) {
            // apaga a primeira linha
            modelo.removeRow(0);
        }
        int i = 1;
        // verificar se existe no banco de dados se nao existir pedir novamente o usuario e senha
        try {
            Statement stmt = con.getConnection().createStatement();
            String apresenta = "";
            int qtd = 0;
            String sql = "SELECT h.separacao, j.nome AS nome_jogo, j.preco FROM public.historico h JOIN public.jogos j ON h.idjogo = j.id WHERE h.idcliente = " + c.getId() + ";";
            ResultSet rs = stmt.executeQuery(sql);
            int separacao = 0;
            int aux = 0;
            while (rs.next()) {
                separacao = rs.getInt(1);

                if (separacao != aux) {
                    if (!listaAjuda.contains(separacao)) {
                        listaAjuda.add(separacao);
                    }
                    if (aux != 0) {
                        modelo.addRow(new Object[]{i, qtd, apresenta, valorTotal});
                        i++;
                        apresenta = "";
                        valorTotal = 0;
                        qtd = 0;
                    }
                    aux = separacao;
                }
                qtd++;
                apresenta += rs.getString(2) + ",";
                valorTotal += rs.getFloat(3);
                if (rs.isLast()) {
                    modelo.addRow(new Object[]{i, qtd, apresenta, valorTotal});
                }

                // percorre o ArrayList de salas
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
